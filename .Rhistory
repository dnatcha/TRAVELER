# rows_human_prevalence_destination = which(tocheck$outcome_type == 'human_prevalence_destination') # these rows should not have origin data
# rows_animal_prevalence_destination = which(tocheck$outcome_type == 'animal_prevalence_destination')
# rows_prevalence_destination = c(rows_human_prevalence_destination, rows_animal_prevalence_destination)
# prevalence_destination = tocheck[rows_prevalence_destination,]
# prevalence_destination_origin = prevalence_destination[, grep('origin', colnames(prevalence_destination))]
# all(is.na(prevalence_destination_origin)) # all should be missing
# prevalence_destination_NOTorigin = prevalence_destination[, -grep('origin', colnames(prevalence_destination))]
# prevalence_destination_missing = prevalence_destination_NOTorigin[!complete.cases(prevalence_destination_NOTorigin),]
# View(prevalence_destination_missing)
#
# rows_human_acquisition = which(tocheck$outcome_type == 'human_acquisition_origin')
# acquisition = tocheck[rows_human_acquisition,]
# View(acquisition)
############################
# save cleaned data
write.csv(clean_dat, file = 'data/clean_dat.csv')
# set working directory
setwd('~/Documents/nBox/git_projects/TRAVELER-main/')
# load libraries
library(plotly); library(ggplot2); library(ggpubr); library(viridis)
library(dplyr)
library(stringr)
theme_set(theme_minimal())
# load raw data
dat = read.csv('~/Documents/nBox/git_projects/TRAVELER-main/data/clean_dat.csv')
study.plot.dat = dat[,c('study_id', 'outcome_type', 'travel_yr_value')]
study.plot.dat$study_id = as.factor(study.plot.dat$study_id)
ggplot(study.plot.dat, aes(x = travel_yr_value)) +
geom_bar() +
facet_grid(.~outcome_type) +
labs(x = '') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
study.plot.dat = dat[,c('author_year', 'outcome_type', 'travel_yr_value')]
ggplot(study.plot.dat, aes(x = travel_yr_value)) +
geom_bar() +
facet_grid(.~outcome_type) +
labs(x = '') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
colnames(dat)
View(dat)
study.plot.dat = dat[,c('author_yr', 'outcome_type', 'travel_yr_value')]
ggplot(study.plot.dat, aes(x = travel_yr_value)) +
geom_bar() +
facet_grid(.~outcome_type) +
labs(x = '') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(study.plot.dat, aes(x = travel_yr_value)) +
geom_bar() +
facet_grid(.~outcome_type) +
labs(x = '') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
library(WDI)
geo.plot.dat = unique(dat[,c('destination_country', 'origin_country')])
head(geo.plot.dat)
geo.plot.dat.wide = unique(dat[,c('destination_country', 'origin_country')])
geo.plot.dat = reshape2::melt(geo.plot.dat)
head(geo.plot.dat)
geo.plot.dat.wide = unique(dat[,c('destination_country', 'origin_country')])
geo.plot.dat = reshape2::melt(geo.plot.dat.wide)
head(geo.plot.dat)
geo.plot.dat.wide = unique(dat[,c('destination_country', 'origin_country')])
head(reshape2::melt(geo.plot.dat.wide))
geo.plot.dat = reshape2::melt(geo.plot.dat.wide, id.var = 'origin_country')
head(geo.plot.dat)
geo.plot.dat.wide = unique(dat[,c('destination_country', 'origin_country')])
geo.plot.dat = data.frame(type = c(rep('destination_country', nrow(geo.plot.dat.wide)),
rep('origin_country', nrow(geo.plot.dat.wide))),
country = c(geo.plot.dat.wide$destination_country,
geo.plot.dat.wide$origin_country) )
head(geo.plot.dat )
geo.plot.dat = geo.plot.dat[!is.na(geo.plot.dat$country),]
head(WDI_data$country)
plot.dat = merge(geo.plot.dat, WDI_data$country, by = 'country', all.x = T)
head(plot.dat)
# set working directory
setwd('~/Documents/nBox/git_projects/TRAVELER-main/')
# load libraries
library(plotly); library(ggplot2); library(ggpubr); library(viridis)
library(dplyr)
library(stringr)
library(WDI)
library(leaflet)
theme_set(theme_minimal())
# load raw data
dat = read.csv('~/Documents/nBox/git_projects/TRAVELER-main/data/clean_dat.csv')
gps = WDI_data$country
head(gps)
gps = apply(WDI_data$country, 2, toupper)
plot.dat = merge(geo.plot.dat, WDI_data$country, by = 'country', all.x = T)
head(plot.dat)
plot.dat = merge(geo.plot.dat, gps, by = 'country', all.x = T)
head(plot.dat )
str(plot.dat )
leaflet() %>%
setView(lng = plot.dat$longitude[1], lat =  locations_clean$lat[1], zoom = 2) %>%
addTiles() %>%
addMarkers(lng = plot.dat$longitude, lat = plot.dat$latitude, color = ~pal(type))
?addMarkers
leaflet() %>%
setView(lng = plot.dat$longitude[1], lat =  locations_clean$lat[1], zoom = 2) %>%
addTiles() %>%
addCircles(lng = plot.dat$longitude, lat = plot.dat$latitude, color = ~pal(type))
leaflet() %>%
setView(lng = plot.dat$longitude[1], lat =  locations_clean$lat[1], zoom = 2) %>%
addTiles() %>%
addCircleMarkers(lng = ~plot.dat$longitude, lat = ~plot.dat$latitude, color = ~pal(type))
leaflet() %>%
setView(lng = plot.dat$longitude[1], lat = plot.dat$latitude [1], zoom = 2) %>%
addTiles() %>%
addCircleMarkers(lng = ~plot.dat$longitude, lat = ~plot.dat$latitude, color = ~pal(type))
leaflet() %>%
setView(lng = plot.dat$longitude[1], lat = plot.dat$latitude [1], zoom = 2) %>%
addTiles() %>%
addCircleMarkers(data = plot.dat, lng = ~longitude, lat = ~latitude, color = ~pal(type))
str(plot.dat$longitude)
geo.plot.dat.wide = unique(dat[,c('destination_country', 'origin_country')])
geo.plot.dat = data.frame(type = c(rep('destination_country', nrow(geo.plot.dat.wide)),
rep('origin_country', nrow(geo.plot.dat.wide))),
country = c(geo.plot.dat.wide$destination_country,
geo.plot.dat.wide$origin_country))
geo.plot.dat = geo.plot.dat[!is.na(geo.plot.dat$country),]
gps = apply(WDI_data$country, 2, toupper)
plot.dat = merge(geo.plot.dat, gps, by = 'country', all.x = T)
plot.dat$latitude = as.numeric(plot.dat$latitude)
plot.dat$longitude = as.numeric(plot.dat$longitude)
leaflet() %>%
setView(lng = plot.dat$longitude[1], lat = plot.dat$latitude [1], zoom = 2) %>%
addTiles() %>%
addCircleMarkers(data = plot.dat, lng = ~longitude, lat = ~latitude, color = ~pal(type))
leaflet() %>%
setView(lng = plot.dat$longitude[1], lat = plot.dat$latitude [1], zoom = 2) %>%
addTiles() %>%
addCircleMarkers(data = plot.dat, lng = ~longitude, lat = ~latitude, color = ~type)
beatCol <- colorFactor(palette = 'RdYlGn', plot.dat$type)
leaflet() %>%
setView(lng = plot.dat$longitude[1], lat = plot.dat$latitude [1], zoom = 2) %>%
addTiles() %>%
addCircleMarkers(data = plot.dat, lng = ~longitude, lat = ~latitude, color = ~beatCol(type))
leaflet() %>%
setView(lng = plot.dat$longitude[1], lat = plot.dat$latitude [1], zoom = 2) %>%
addTiles() %>%
addCircleMarkers(data = plot.dat, lng = ~longitude, lat = ~latitude, color = ~beatCol(type)) %>%
addLegend('bottomright', pal = beatCol, values = plot.dat$type, opacity = 1)
colnames(geo.plot.dat)
gdp.plot.dat.wide = unique(dat[,c('destination_country', 'origin_country', 'destination_gdp', 'origin_gdp')])
head(gdp.plot.dat.wide)
gdp.plot.dat = reshape2::melt(gdp.plot.dat.wide, id.var = c('destination_country', 'origin_country'))
head(gdp.plot.dat)
View(gdp.plot.dat)
gdp.plot.dat.wide = unique(dat[,c('destination_country', 'origin_country', 'destination_gdp', 'origin_gdp')])
gdp.plot.dat = rbind(gdp.plot.dat.wide[,c('destination_country', 'destination_gdp')],
gdp.plot.dat.wide[,c('origin_country', 'origin_gdp')])
gdp.plot.dat.wide = as.matrix(unique(dat[,c('destination_country', 'origin_country', 'destination_gdp', 'origin_gdp')]))
gdp.plot.dat = rbind(gdp.plot.dat.wide[,c('destination_country', 'destination_gdp')],
gdp.plot.dat.wide[,c('origin_country', 'origin_gdp')])
head(gdp.plot.dat)
gdp.plot.dat.wide = as.matrix(unique(dat[,c('destination_country', 'origin_country', 'destination_gdp', 'origin_gdp')]))
gdp.plot.dat = rbind.data.frame(gdp.plot.dat.wide[,c('destination_country', 'destination_gdp')],
gdp.plot.dat.wide[,c('origin_country', 'origin_gdp')])
gdp.plot.dat.wide = as.matrix(unique(dat[,c('destination_country', 'origin_country', 'destination_gdp', 'origin_gdp')]))
gdp.plot.dat = rbind(gdp.plot.dat.wide[,c('destination_country', 'destination_gdp')],
gdp.plot.dat.wide[,c('origin_country', 'origin_gdp')])
gdp.plot.dat = as.data.frame(gdp.plot.dat )
gdp.plot.dat$destination_gdp = as.numeric(gdp.plot.dat$destination_gdp)
str(gdp.plot.dat)
gdp.plot.dat.wide = as.matrix(unique(dat[,c('destination_country', 'origin_country', 'destination_gdp', 'origin_gdp')]))
gdp.plot.dat = rbind(gdp.plot.dat.wide[,c('destination_country', 'destination_gdp')],
gdp.plot.dat.wide[,c('origin_country', 'origin_gdp')])
gdp.plot.dat$type = c(rep('destination_country', nrow(geo.plot.dat.wide)),
rep('origin_country', nrow(geo.plot.dat.wide)))
gdp.plot.dat = as.data.frame(gdp.plot.dat)
gdp.plot.dat$destination_gdp = as.numeric(gdp.plot.dat$destination_gdp)
gdp.plot.dat.wide = as.matrix(unique(dat[,c('destination_country', 'origin_country', 'destination_gdp', 'origin_gdp')]))
gdp.plot.dat = rbind(gdp.plot.dat.wide[,c('destination_country', 'destination_gdp')],
gdp.plot.dat.wide[,c('origin_country', 'origin_gdp')])
gdp.plot.dat = as.data.frame(gdp.plot.dat)
gdp.plot.dat$type = c(rep('destination_country', nrow(geo.plot.dat.wide)),
rep('origin_country', nrow(geo.plot.dat.wide)))
gdp.plot.dat.wide = as.matrix(unique(dat[,c('destination_country', 'origin_country', 'destination_gdp', 'origin_gdp')]))
gdp.plot.dat = rbind(gdp.plot.dat.wide[,c('destination_country', 'destination_gdp')],
gdp.plot.dat.wide[,c('origin_country', 'origin_gdp')])
gdp.plot.dat = as.data.frame(gdp.plot.dat)
gdp.plot.dat$type = c(rep('destination_country', nrow(gdp.plot.dat.wide)),
rep('origin_country', nrow(gdp.plot.dat.wide)))
gdp.plot.dat$destination_gdp = as.numeric(gdp.plot.dat$destination_gdp)
ggplot(gdp.plot.dat, aes(x = destination_gdp)) +
geom_density() +
facet_grid(.~type) +
labs(x = 'Year which travels took place') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(gdp.plot.dat, aes(x = destination_gdp)) +
geom_density() +
facet_grid(.~type) +
labs(x = 'GDP')
ggplot(gdp.plot.dat, aes(x = destination_gdp)) +
geom_density() +
facet_grid(.~type) +
labs(x = 'GDP', y='Density)
ggplot(gdp.plot.dat, aes(x = destination_gdp)) +
geom_density() +
facet_grid(.~type) +
labs(x = 'GDP', y='Density')
ggplot(gdp.plot.dat, aes(x = destination_gdp)) +
geom_density() +
facet_grid(.~type) +
labs(x = 'GDP', y='Density')
gdp.plot.dat.wide = as.matrix(unique(dat[,c('destination_country', 'origin_country', 'destination_incomelvl', 'origin_incomelvl')]))
gdp.plot.dat.wide = as.matrix(unique(dat[,c('destination_country', 'origin_country', 'destination_incomelvl', 'origin_incomelvl')]))
gdp.plot.dat = rbind(gdp.plot.dat.wide[,c('destination_country', 'destination_incomelvl')],
gdp.plot.dat.wide[,c('origin_country', 'origin_incomelvl')])
gdp.plot.dat = as.data.frame(gdp.plot.dat)
gdp.plot.dat$type = c(rep('destination_country', nrow(gdp.plot.dat.wide)),
rep('origin_country', nrow(gdp.plot.dat.wide)))
gdp.plot.dat$destination_gdp = as.numeric(gdp.plot.dat$destination_gdp)
gdp.plot.dat.wide = as.matrix(unique(dat[,c('destination_country', 'origin_country', 'destination_incomelvl', 'origin_incomelvl')]))
gdp.plot.dat = rbind(gdp.plot.dat.wide[,c('destination_country', 'destination_incomelvl')],
gdp.plot.dat.wide[,c('origin_country', 'origin_incomelvl')])
gdp.plot.dat = as.data.frame(gdp.plot.dat)
gdp.plot.dat$type = c(rep('destination_country', nrow(gdp.plot.dat.wide)),
rep('origin_country', nrow(gdp.plot.dat.wide)))
head(gdp.plot.dat)
ggplot(gdp.plot.dat, aes(x = destination_incomelvl)) +
geom_bar() +
facet_grid(.~type)
ggplot(gdp.plot.dat, aes(x = destination_incomelvl)) +
geom_bar() +
facet_grid(.~type) +
labs(x = 'Income level', y='Density') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(gdp.plot.dat, aes(x = destination_incomelvl)) +
geom_bar() +
facet_grid(.~type, drop=T) +
labs(x = 'Income level', y='Density') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
head(gdp.plot.dat)
gdp.plot.dat = gdp.plot.dat[!is.na(gdp.plot.dat$destination_country),]
ggplot(gdp.plot.dat, aes(x = destination_incomelvl)) +
geom_bar() +
facet_grid(.~type, drop=T) +
labs(x = 'Income level', y='Density') +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
geo.plot.dat.wide = unique(dat[grep('human', dat$outcome_type) ,c('destination_country', 'origin_country')])
geo.plot.dat = data.frame(type = c(rep('destination_country', nrow(geo.plot.dat.wide)),
rep('origin_country', nrow(geo.plot.dat.wide))),
country = c(geo.plot.dat.wide$destination_country,
geo.plot.dat.wide$origin_country))
gps = apply(WDI_data$country, 2, toupper)
plot.dat = merge(geo.plot.dat, gps, by = 'country', all.x = T)
plot.dat$latitude = as.numeric(plot.dat$latitude)
plot.dat$longitude = as.numeric(plot.dat$longitude)
unique(dat$outcome_type)
# Community prevalence at destination countries - grouped by gdp
data.destination = dat[c(which(dat$outcome_type == 'human_prevalence_destination'),
which(dat$outcome_type == 'animal_prevalence_destination'),
which(dat$outcome_type == 'human_acquisition_origin')),]
data.destination$outcome_type[which(data.destination$outcome_type == 'human_prevalence_destination')] = 'Community dwellers'
data.destination$outcome_type[which(data.destination$outcome_type == 'animal_prevalence_destination')] = 'Domestic animals'
data.destination$outcome_type[which(data.destination$outcome_type == 'human_acquisition_origin')] = 'Acquisition amongst returning travellers'
data.destination$outcome_type = as.factor(data.destination$outcome_type)
data.destination$outcome_type = factor(data.destination$outcome_type, levels = c('Community dwellers', 'Domestic animals', 'Acquisition amongst returning travellers'))
colnames(dat)
ggplot(data.destination, aes(x = travel_yr_value, y = outcome_value, color = destination_gdp)) +
geom_point(aes(size = sample_sizeSQ)) +
labs(y = 'Proportion of MDRO carriers', x = '') +
scale_color_viridis(name = 'GDP of the detination countries') +
scale_size_continuous(name = 'Sample size') +
facet_grid(outcome_type ~ .) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = 'bottom')
data.destination$sample_sizeSQ = sqrt(data.destination$sample_size)
ggplot(data.destination, aes(x = travel_yr_value, y = outcome_value, color = destination_gdp)) +
geom_point(aes(size = sample_sizeSQ)) +
labs(y = 'Proportion of MDRO carriers', x = '') +
scale_color_viridis(name = 'GDP of the detination countries') +
scale_size_continuous(name = 'Sample size') +
facet_grid(outcome_type ~ .) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = 'bottom')
# group time to discrete
data.destination$travel_yr_value.cat = data.destination$travel_yr_value
data.destination$travel_yr_value.cat[grep('1999', data.destination$travel_yr_value)] = 'Before 2000'
data.destination$travel_yr_value.cat[grep('2001', data.destination$travel_yr_value)] = '2001 - 2005'
data.destination$travel_yr_value.cat[grep('2002', data.destination$travel_yr_value)] = '2001 - 2005'
data.destination$travel_yr_value.cat[grep('2003', data.destination$travel_yr_value)] = '2001 - 2005'
data.destination$travel_yr_value.cat[grep('2005', data.destination$travel_yr_value)] = '2001 - 2005'
data.destination$travel_yr_value.cat[grep('2006', data.destination$travel_yr_value)] = '2006 - 2010'
data.destination$travel_yr_value.cat[grep('2007', data.destination$travel_yr_value)] = '2006 - 2010'
data.destination$travel_yr_value.cat[grep('2008', data.destination$travel_yr_value)] = '2006 - 2010'
data.destination$travel_yr_value.cat[grep('2010', data.destination$travel_yr_value)] = '2006 - 2010'
data.destination$travel_yr_value.cat[which(data.destination$travel_yr_value == '2009-2011')] = '2011 - 2015'
data.destination$travel_yr_value.cat[grep('2009', data.destination$travel_yr_value)] = '2006 - 2010'
data.destination$travel_yr_value.cat[grep('2011', data.destination$travel_yr_value)] = '2011 - 2015'
data.destination$travel_yr_value.cat[grep('2012', data.destination$travel_yr_value)] = '2011 - 2015'
data.destination$travel_yr_value.cat[grep('2013', data.destination$travel_yr_value)] = '2011 - 2015'
data.destination$travel_yr_value.cat[which(data.destination$travel_yr_value == '2014-2016')] = '2016 - 2020'
data.destination$travel_yr_value.cat[grep('2014', data.destination$travel_yr_value)] = '2011 - 2015'
data.destination$travel_yr_value.cat[which(data.destination$travel_yr_value == '2015-2016')] = '2016 - 2020'
data.destination$travel_yr_value.cat[grep('2015', data.destination$travel_yr_value)] = '2011 - 2015'
data.destination$travel_yr_value.cat[grep('2016', data.destination$travel_yr_value)] = '2016 - 2020'
data.destination$travel_yr_value.cat[grep('2017', data.destination$travel_yr_value)] = '2016 - 2020'
data.destination$travel_yr_value.cat[grep('2018', data.destination$travel_yr_value)] = '2016 - 2020'
data.destination$travel_yr_value.cat = as.factor(data.destination$travel_yr_value.cat)
data.destination$travel_yr_value.cat = factor(data.destination$travel_yr_value.cat, levels = c('Before 2000', '2001 - 2005', '2006 - 2010', '2011 - 2015', '2016 - 2020'))
# Community prevalence at destination countries - grouped by gdp
data.destination = dat[c(which(dat$outcome_type == 'human_prevalence_destination'),
which(dat$outcome_type == 'animal_prevalence_destination'),
which(dat$outcome_type == 'human_acquisition_origin')),]
data.destination$outcome_type[which(data.destination$outcome_type == 'human_prevalence_destination')] = 'Community dwellers'
data.destination$outcome_type[which(data.destination$outcome_type == 'animal_prevalence_destination')] = 'Domestic animals'
data.destination$outcome_type[which(data.destination$outcome_type == 'human_acquisition_origin')] = 'Acquisition amongst returning travellers'
data.destination$outcome_type = as.factor(data.destination$outcome_type)
data.destination$outcome_type = factor(data.destination$outcome_type, levels = c('Community dwellers', 'Domestic animals', 'Acquisition amongst returning travellers'))
data.destination$sample_sizeSQ = sqrt(data.destination$sample_size)
ggplot(data.destination, aes(x = travel_yr_value, y = outcome_value, color = destination_gdp)) +
geom_point(aes(size = sample_sizeSQ)) +
labs(y = 'Proportion of MDRO carriers', x = '') +
scale_color_viridis(name = 'GDP of the detination countries') +
scale_size_continuous(name = 'Sample size') +
facet_grid(outcome_type ~ .) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
legend.position = 'bottom')
ggplot(data.destination, aes(x = gdp, y = outcome_value, color = travel_yr_value.cat)) +
geom_point(aes(size = sample_sizeSQ)) +
labs(y = 'Proportion of MDRO carriers', x = 'GDP of destination countries') +
scale_colour_brewer(type = 'seq', name = 'Time') +
scale_size_continuous(name = 'Sample size') +
facet_grid(outcome_type ~ .) +
theme(legend.position = 'bottom')
ggplot(data.destination, aes(x = destination_gdp, y = outcome_value, color = travel_yr_value.cat)) +
geom_point(aes(size = sample_sizeSQ)) +
labs(y = 'Proportion of MDRO carriers', x = 'GDP of destination countries') +
scale_colour_brewer(type = 'seq', name = 'Time') +
scale_size_continuous(name = 'Sample size') +
facet_grid(outcome_type ~ .) +
theme(legend.position = 'bottom')
data.destination$travel_yr_value.cat = data.destination$travel_yr_value
data.destination$travel_yr_value.cat[grep('1999', data.destination$travel_yr_value)] = 'Before 2000'
data.destination$travel_yr_value.cat[grep('2001', data.destination$travel_yr_value)] = '2001 - 2005'
data.destination$travel_yr_value.cat[grep('2002', data.destination$travel_yr_value)] = '2001 - 2005'
data.destination$travel_yr_value.cat[grep('2003', data.destination$travel_yr_value)] = '2001 - 2005'
data.destination$travel_yr_value.cat[grep('2005', data.destination$travel_yr_value)] = '2001 - 2005'
data.destination$travel_yr_value.cat[grep('2006', data.destination$travel_yr_value)] = '2006 - 2010'
data.destination$travel_yr_value.cat[grep('2007', data.destination$travel_yr_value)] = '2006 - 2010'
data.destination$travel_yr_value.cat[grep('2008', data.destination$travel_yr_value)] = '2006 - 2010'
data.destination$travel_yr_value.cat[grep('2010', data.destination$travel_yr_value)] = '2006 - 2010'
data.destination$travel_yr_value.cat[which(data.destination$travel_yr_value == '2009-2011')] = '2011 - 2015'
data.destination$travel_yr_value.cat[grep('2009', data.destination$travel_yr_value)] = '2006 - 2010'
data.destination$travel_yr_value.cat[grep('2011', data.destination$travel_yr_value)] = '2011 - 2015'
data.destination$travel_yr_value.cat[grep('2012', data.destination$travel_yr_value)] = '2011 - 2015'
data.destination$travel_yr_value.cat[grep('2013', data.destination$travel_yr_value)] = '2011 - 2015'
data.destination$travel_yr_value.cat[which(data.destination$travel_yr_value == '2014-2016')] = '2016 - 2020'
data.destination$travel_yr_value.cat[grep('2014', data.destination$travel_yr_value)] = '2011 - 2015'
data.destination$travel_yr_value.cat[which(data.destination$travel_yr_value == '2015-2016')] = '2016 - 2020'
data.destination$travel_yr_value.cat[grep('2015', data.destination$travel_yr_value)] = '2011 - 2015'
data.destination$travel_yr_value.cat[grep('2016', data.destination$travel_yr_value)] = '2016 - 2020'
data.destination$travel_yr_value.cat[grep('2017', data.destination$travel_yr_value)] = '2016 - 2020'
data.destination$travel_yr_value.cat[grep('2018', data.destination$travel_yr_value)] = '2016 - 2020'
data.destination$travel_yr_value.cat = as.factor(data.destination$travel_yr_value.cat)
data.destination$travel_yr_value.cat = factor(data.destination$travel_yr_value.cat, levels = c('Before 2000', '2001 - 2005', '2006 - 2010', '2011 - 2015', '2016 - 2020'))
ggplot(data.destination, aes(x = destination_gdp, y = outcome_value, color = travel_yr_value.cat)) +
geom_point(aes(size = sample_sizeSQ)) +
labs(y = 'Proportion of MDRO carriers', x = 'GDP of destination countries') +
scale_colour_brewer(type = 'seq', name = 'Time') +
scale_size_continuous(name = 'Sample size') +
facet_grid(outcome_type ~ .) +
theme(legend.position = 'bottom')
data.animal = data.destination[which(data.destination$outcome_type == 'Domestic animals'),]
data.animal = data.destination[which(data.destination$outcome_type == 'Domestic animals'),]
data.animal = data.animal[c('outcome_type', 'outcome_value', 'destination_country', 'travel_yr_value.cat')]
data.trav = data.destination[which(data.destination$outcome_type == 'Acquisition amongst returning travellers'),]
data.trav = data.trav[c('outcome_type', 'outcome_value', 'destination_country', 'travel_yr_value.cat')]
data.commhuman =  data.destination[which(data.destination$outcome_type == 'Community dwellers'),]
data.commhuman = data.commhuman[c('outcome_type', 'outcome_value', 'destination_country', 'travel_yr_value.cat')]
# community dwellers against animals
data.animal.commhuman = merge(data.commhuman, data.animal, by = c('destination_country', 'travel_yr_value.cat'), all = T)
head(data.animal.commhuman)
animal.comm = ggplot(data.animal.commhuman, aes(x = outcome_value.x, y = outcome_value.y)) +
geom_point(color = 'green', alpha = 0.4) +
geom_smooth(method = lm, se = FALSE) +
labs(y = 'Proportion of MDRO carriers in domestic animals', x = 'Proportion of MDRO carriers in community dwellers')
animal.comm
data.animal = data.destination[which(data.destination$outcome_type == 'Domestic animals'),]
data.animal = data.animal[c('outcome_type', 'outcome_value', 'destination_incomelvl', 'travel_yr_value.cat')]
data.trav = data.destination[which(data.destination$outcome_type == 'Acquisition amongst returning travellers'),]
data.trav = data.trav[c('outcome_type', 'outcome_value', 'destination_incomelvl', 'travel_yr_value.cat')]
data.commhuman =  data.destination[which(data.destination$outcome_type == 'Community dwellers'),]
data.commhuman = data.commhuman[c('outcome_type', 'outcome_value', 'destination_incomelvl', 'travel_yr_value.cat')]
# community dwellers against animals
data.animal.commhuman = merge(data.commhuman, data.animal, by = c('destination_incomelvl', 'travel_yr_value.cat'), all = T)
animal.comm = ggplot(data.animal.commhuman, aes(x = outcome_value.x, y = outcome_value.y)) +
geom_point(color = 'pink', alpha = 0.4) +
geom_smooth(method = lm, se = FALSE) +
labs(y = 'Proportion of MDRO carriers in domestic animals', x = 'Proportion of MDRO carriers in community dwellers')
# community dwellers against travellers
data.trav.commhuman = merge(data.commhuman, data.trav, by = c('gdp.cat', 'Time.cat'), all = T)
head(data.commhuman)
head(data.animal.commhuman)
library(tidyverse)
library(gapminder)
install.packages('gapminder')
library(gapminder)
df = gapminder %>%
filter(year %in% c(1952,2007)) %>%
filter(continent %in% c("Asia")) %>%
select(country,year,lifeExp, gdpPercap)%>%
mutate(paired = rep(1:(n()/2),each=2),
year=factor(year))
head(df)
data.animal = data.destination[which(data.destination$outcome_type == 'Domestic animals'),]
data.animal = data.animal[c('outcome_type', 'outcome_value', 'destination_country', 'travel_yr_value.cat')]
data.trav = data.destination[which(data.destination$outcome_type == 'Acquisition amongst returning travellers'),]
data.trav = data.trav[c('outcome_type', 'outcome_value', 'destination_country', 'travel_yr_value.cat')]
data.commhuman =  data.destination[which(data.destination$outcome_type == 'Community dwellers'),]
data.commhuman = data.commhuman[c('outcome_type', 'outcome_value', 'destination_country', 'travel_yr_value.cat')]
View(data.commhuman)
data.animal = data.destination[which(data.destination$outcome_type == 'Domestic animals'),]
data.animal = data.animal[c('outcome_type', 'outcome_value', 'destination_country', 'travel_yr_value.cat')]
data.trav = data.destination[which(data.destination$outcome_type == 'Acquisition amongst returning travellers'),]
data.trav = data.trav[c('outcome_type', 'outcome_value', 'destination_country', 'travel_yr_value.cat')]
data.commhuman =  data.destination[which(data.destination$outcome_type == 'Community dwellers'),]
data.commhuman = data.commhuman[c('outcome_type', 'outcome_value', 'destination_country', 'travel_yr_value.cat')]
data.paired = merge(data.animal, data.trav, by = 'travel_yr_value.cat', all = T)
data.paired = merge(data.paired, data.commhuman, by = 'travel_yr_value.cat', all = T)
head
head(data.paired)
data.paired = merge(data.animal, data.trav, by = 'travel_yr_value.cat', all = T)
head(data.paired )
View(data.paired )
data.paired = data.paired[c('travel_yr_value.cat', 'outcome_value.x', 'destination_country.x',
'outcome_value.y', 'destination_country.y')]
colnames(data.paired) = c('travel_yr_value.cat', 'animal_prop', 'animal_country', 'trav_prop', 'trav_country')
head(data.paired)
data.paired = merge(data.paired, data.commhuman, by = 'travel_yr_value.cat', all = T)
head(data.paired)
data.paired = data.paired[c('travel_yr_value.cat', 'animal_prop', 'animal_country', 'trav_prop', 'trav_country', 'outcome_value', 'destination_country')]
colnames(data.paired) = c('travel_yr_value.cat', 'animal_prop', 'animal_country', 'trav_prop', 'trav_country', 'comm_prop', 'comm_country')
View(data.paired)
data.paired = data.paired[complete.cases(data.paired),]
data.animal = data.destination[which(data.destination$outcome_type == 'Domestic animals'),]
data.animal = data.animal[c('outcome_type', 'outcome_value', 'destination_country', 'travel_yr_value.cat')]
data.trav = data.destination[which(data.destination$outcome_type == 'Acquisition amongst returning travellers'),]
data.trav = data.trav[c('outcome_type', 'outcome_value', 'destination_country', 'travel_yr_value.cat')]
data.commhuman =  data.destination[which(data.destination$outcome_type == 'Community dwellers'),]
data.commhuman = data.commhuman[c('outcome_type', 'outcome_value', 'destination_country', 'travel_yr_value.cat')]
data.paired = merge(data.animal, data.trav, by = 'travel_yr_value.cat', all = T)
data.paired = data.paired[c('travel_yr_value.cat', 'outcome_value.x', 'destination_country.x',
'outcome_value.y', 'destination_country.y')]
colnames(data.paired) = c('travel_yr_value.cat', 'animal_prop', 'animal_country', 'trav_prop', 'trav_country')
data.paired = merge(data.paired, data.commhuman, by = 'travel_yr_value.cat', all = T)
data.paired = data.paired[c('travel_yr_value.cat', 'animal_prop', 'animal_country', 'trav_prop', 'trav_country', 'outcome_value', 'destination_country')]
colnames(data.paired) = c('travel_yr_value.cat', 'animal_prop', 'animal_country', 'trav_prop', 'trav_country', 'comm_prop', 'comm_country')
## pair animals and travellers
pair_animal_trav = data.paired[c('travel_yr_value.cat', 'animal_prop', 'animal_country', 'trav_prop', 'trav_country')]
pair_animal_trav = pair_animal_trav[complete.cases(pair_animal_trav),]
View(pair_animal_trav)
View( pair_animal_trav[which(pair_animal_trav$animal_country == pair_animal_trav$trav_country),])
pair_animal_trav = pair_animal_trav[which(pair_animal_trav$animal_country == pair_animal_trav$trav_country),]
unique(pair_animal_trav$animal_country)
head()
head(data.animal.commhuman)
# community dwellers against animals
data.animal.commhuman = merge(data.commhuman, data.animal, by = c('destination_country', 'travel_yr_value.cat'), all = T)
# community dwellers against animals
head(data.animal.commhuman)
df
a = data.animal.commhuman[complete.cases(data.animal.commhuman),]
unique(a$destination_country)
data.animal = data.destination[which(data.destination$outcome_type == 'Domestic animals'),]
data.animal = data.animal[c('outcome_type', 'outcome_value', 'destination_country', 'travel_yr_value.cat')]
data.trav = data.destination[which(data.destination$outcome_type == 'Acquisition amongst returning travellers'),]
data.trav = data.trav[c('outcome_type', 'outcome_value', 'destination_country', 'travel_yr_value.cat')]
data.commhuman =  data.destination[which(data.destination$outcome_type == 'Community dwellers'),]
data.commhuman = data.commhuman[c('outcome_type', 'outcome_value', 'destination_country', 'travel_yr_value.cat')]
# community dwellers against animals
data.animal.commhuman = merge(data.commhuman, data.animal, by = c('destination_country', 'travel_yr_value.cat'), all = T)
# community dwellers against travellers
data.trav.commhuman = merge(data.commhuman, data.trav, by = c('destination_country', 'travel_yr_value.cat'), all = T)
# animals against travellers
data.trav.animal = merge(data.animal, data.trav, by = c('destination_country', 'travel_yr_value.cat'), all = T)
head(data.trav.animal)
View(data.trav.animal)
data.trav.animal.long = reshape2::melt(data.trav.animal, id.var = c('destination_country', 'travel_yr_value.cat'))
head(data.trav.animal.long)
View(data.trav.animal.long)
data.trav.animal.long = reshape2::melt(data.trav.animal, id.var = c('destination_country', 'travel_yr_value.cat', 'outcome_type.x', 'outcome_type.y'))
a = data.frame(a = 1:3, b = 3:5, c = 4:6)
reshape2::melt(a, id.var = 'a')
a
data.trav.animal.long = reshape2::melt(data.trav.animal, id.var = c('destination_country', 'travel_yr_value.cat'))
plot.trav.animal.long = data.trav.animal.long[which(nchar(data.trav.animal.long$value) > 10),]
View(plot.trav.animal.long)
plot.trav.animal.long = data.trav.animal.long[which(nchar(data.trav.animal.long$value) < 3),]
plot.trav.animal.long = unique(data.trav.animal.long[which(nchar(data.trav.animal.long$value) < 3),])
plot.trav.animal.long = plot.trav.animal.long[sort(plot.trav.animal.long$destination_country),]
plot.trav.animal.long = unique(data.trav.animal.long[which(nchar(data.trav.animal.long$value) < 3),])
plot.trav.animal.long = plot.trav.animal.long[order(plot.trav.animal.long$destination_country),]
# animals against travellers
data.trav.animal = merge(data.animal, data.trav, by = c('destination_country', 'travel_yr_value.cat'), all = T)
data.trav.animal.long = reshape2::melt(data.trav.animal, id.var = c('destination_country', 'travel_yr_value.cat'))
plot.trav.animal.long = unique(data.trav.animal.long[which(nchar(data.trav.animal.long$value) < 3),])
plot.trav.animal.long = plot.trav.animal.long[order(plot.trav.animal.long$destination_country),]
# animals against travellers
data.trav.animal = merge(data.animal, data.trav, by = c('destination_country', 'travel_yr_value.cat'), all = T)
data.trav.animal = data.trav.animal[which(!is.na(data.trav.animal$outcome_value.x & data.trav.animal$outcome_value.y)),]
View(data.trav.animal)
# animals against travellers
data.trav.animal = merge(data.animal, data.trav, by = c('destination_country', 'travel_yr_value.cat'), all = T)
data.trav.animal = data.trav.animal[which(!is.na(data.trav.animal$outcome_value.x) & !is.na(data.trav.animal$outcome_value.y)),]
data.trav.animal.long = reshape2::melt(data.trav.animal, id.var = c('destination_country', 'travel_yr_value.cat'))
plot.trav.animal.long = unique(data.trav.animal.long[which(nchar(data.trav.animal.long$value) < 3),])
plot.trav.animal.long = plot.trav.animal.long[order(plot.trav.animal.long$destination_country),]
345-319
